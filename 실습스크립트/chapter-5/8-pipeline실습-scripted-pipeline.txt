* scripted-build 초기 구조 생성

  - Dashboard > 새 Item
    - Pipeline 선택
    - Item명 : scripted-build 지정

* scripted-build에 초기 구조 지정후 로그 보기

node {

    stage('Prepare') {
        echo "Prepare"
    }

    stage('Checkout') {
        echo "Checkout"
    }

    stage('Build') {
        echo "Build"
    }

    stage('SonarScanner') {
        echo "SonarScanner"
    }

    stage('Result') {
         echo "Result"
    }

    stage('Deploy') {
         echo "Deploy"
    }
}

* stage('Prepare') { .. } 에 options / triggers / parameters 추가

properties([
        parameters([
                gitParameter(branch: '', branchFilter: '.*', defaultValue: 'origin/main', description: '배포할 브랜치를 선택합니다.', listSize: '3', name: 'BRANCH', quickFilterEnabled: true, selectedValue: 'NONE', sortMode: 'ASCENDING_SMART', tagFilter: '*', type: 'GitParameterDefinition'),
                [
                        $class              : 'DynamicReferenceParameter',
                        choiceType          : 'ET_FORMATTED_HTML',
                        name                : 'BRANCH_TO_BUILD',
                        referencedParameters: 'BRANCH',
                        script              : [
                                $class        : 'GroovyScript',
                                script        : [
                                        sandbox: true,
                                        script : '''if (BRANCH == "") { return "origin/main 가 빌드 됩니다." } else { return "$BRANCH 가 빌드 됩니다." }'''
                                ],
                                fallbackScript: [
                                        sandbox: true,
                                        script : 'return ""'
                                ]
                        ]
                ],
                booleanParam(defaultValue: true, description: '배포 포함 여부', name: 'DEPLOY_ENABLED')
        ]),
        pipelineTriggers([
            // pollSCM('*/10 * * * *')
            githubPush()
        ]),
        buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '5', numToKeepStr: '5')),
        githubProjectProperty(displayName: '', projectUrlStr: 'https://github.com/[각자의계정]/fastcampus-jenkins')
])

* 체크아웃 설정
  - stage('CheckOut') { .. }를 다음으로 교체
        stage('CheckOut') {
            checkout scmGit(
                    branches: [[name: '${BRANCH}']],
                    userRemoteConfigs: [[
                        credentialsId: 'github-ssh',
                        url: 'git@github.com:[본인GITHUB계정]/fastcampus-jenkins.git']
                    ],
                    extensions: [[$class: 'SparseCheckoutPaths', sparseCheckoutPaths: [[path: 'projects/spring-app']]]]
            )
        }

  - 빌드후 잘 체크 아웃 되는지 확인

* 빌드 설정
  - stage('Build') { .. } 를 다음으로 교체

        stage('Build') {
            dir("projects/spring-app") {
                withGradle {
                   sh "./gradlew build"
               }
            }
        }

  - 빌드후 잘 빌드 되는지 확인

* SonarQube 설정
  - stage('SonarScanner') { .. } 를 다음으로 교체

      stage('SonarScanner') {
          // sonarqube 환경하에서, 실행
          def sonarScannerHome = tool 'sonar-scanner'

          withSonarQubeEnv("sonarqube-server") {
              sh """
                      ${sonarScannerHome}/bin/sonar-scanner \
                          -Dsonar.host.url=http://sonarqube:9000 \
                          -Dsonar.projectKey=sample \
                          -Dsonar.projectBaseDir=${WORKSPACE}/projects/spring-app \
                 """
          }

          // quality gate 통과시 까지 대기
          timeout(time: 1, unit: 'MINUTES') {

              // Parameter indicates whether to set pipeline to UNSTABLE if Quality Gate fails
              // true = set pipeline to UNSTABLE, false = don't
              def qg = waitForQualityGate()
              if (qg.status != 'OK') {
                  error "Pipeline aborted due to quality gate failure: ${qg.status}"
              }
          }
      }
  - 빌드후 잘 빌드 되는지 확인

* 배포 설정
  - stage('Deploy') { .. } 를 다음으로 교체

    if (params.DEPLOY_ENABLED == true) {
        stage('Deploy') {
                archiveArtifacts artifacts: 'projects/spring-app/build/libs/*-SNAPSHOT.jar', followSymlinks: false
                build(
                        job: 'pipeline-deploy',
                        parameters: [booleanParam(name: 'ARE_YOU_SURE', value: true)],
                        wait: false,
                        propagate: false
                )
        }
    }

* 후처리 설정
  - stage('Results') { .. } 를 다음으로 교체

    stage('Results') {
        scanForIssues tool: ktLint(pattern: '**/ktlint/**/*.xml')
        junit '**/test-results/**/*.xml'
        mineRepository()
        jacoco sourcePattern: '**/src/main/kotlin'
        emailext attachLog: true, body: email_content(), subject: email_subject(), to: 'junoyoon@gmail.com'
        slackSend channel: "#jenkins", message: "${custom_msg(currentBuild.currentResult)}"
    }

  - node { } 바깥쪽에 다음 메소드를 추가

def email_content() {
    return '''이 이메일은 중요한 것이여!!

${DEFAULT_CONTENT}

'''
}

def email_subject() {
    return '빌드통지!! - ${DEFAULT_SUBJECT}'
}

def custom_msg(status) {
    return " $status: Job [${env.JOB_NAME}] Logs path: ${env.BUILD_URL}/consoleText"
}

def groovy_script() {
  return '''if (BRANCH == "") {
      return "origin/main 가 빌드 됩니다."
  } else {
      return "$BRANCH 가 빌드 됩니다."
  }'''
}

  - 빌드후 로그 확인

* 이후 Jenkinsfile 을 파일로 관리하면, Checkout stage 사라질 수 있는 것을 설명