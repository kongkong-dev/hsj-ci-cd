//
// 다음을 교체 바람
// - [각자의github계정]
// - "여기에 PR서버 DNS 입력"
// - "여기에 DEV서버 DNS 입력"
// - "여기에 QA서버 DNS 입력"
//
pipeline {
    // kubernetes gradle template 과 kaniko template 을 합성
    agent {
        kubernetes {
            inheritFrom "gradle:7.6.1-jdk17 kaniko"
        }
    }

    environment {
        // jenkins 가 관리하는 도구의 위치는 이와 같이 환경 변수로 저장 가능
        // SONAR_SCANNER_HOME = tool name: 'sonar-scanner', type: 'hudson.plugins.sonar.SonarRunnerInstallation'
        TARGET_SERVER_PR = "여기에 PR서버 DNS 입력"
        TARGET_SERVER_DEV = "여기에 DEV서버 DNS 입력"
        TARGET_SERVER_QA = "여기에 QA서버 DNS 입력"
        // gradle cache 저장 위치를 공유 볼륨 하위로 이동
        GRADLE_USER_HOME = "/volumes/gradle-cache-fastcampus-jenkins"
    }

    parameters {
        booleanParam(defaultValue: isDeploymentNecessary(), description: '배포 포함 여부', name: 'DEPLOY_ENABLED')
        choice choices: ['default', 'dev', 'qa', 'pr'], description: '이 브랜치를 배포할 서버를 선택합니다.', name: 'DEPLOY_TO'
    }

    options {
        buildDiscarder logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '5', numToKeepStr: '5')
        githubProjectProperty(displayName: '', projectUrlStr: 'https://github.com/[각자의github계정]/fastcampus-jenkins')
        copyArtifactPermission('*')
    }

    triggers {
        issueCommentTrigger('.*(test this|build this|deploy this).*')
    }


    // stages > stage > steps 순으로 구성
    stages {
        stage('Build') {
            steps {
                container("gradle") {
                    timestamps {
                        // withGradle 을 하면, Gradle 로그를 해석
                        dir("projects/spring-app") {
                            withGradle {
                                sh "gradle build --build-cache"
                            }
                        }
                    }
                }
            }
        }

/*
        stage('SonarScanner') {
            when {
                  expression {
                      return isSonarQubeNecessary()
                  }
              }
            steps {
                // sonarqube 환경하에서, 실행
                withSonarQubeEnv("sonarqube-server") {
                    sh """
                    ${env.SONAR_SCANNER_HOME}/bin/sonar-scanner \
                        -Dsonar.host.url=http://sonarqube:9000 \
                        -Dsonar.projectKey=sample \
                        -Dsonar.projectBaseDir=${WORKSPACE}/projects/spring-app
                  """
                }

                // quality gate 통과시 까지 대기
                timeout(time: 1, unit: 'MINUTES') {

                    // Parameter indicates whether to set pipeline to UNSTABLE if Quality Gate fails
                    // true = set pipeline to UNSTABLE, false = don't
                    waitForQualityGate abortPipeline: true
                }
            }
        }
*/
/*
        stage("Dockerize") {
            when {
                expression {
                    return params.DEPLOY_ENABLED == true
                }
            }
            steps {
                container(name: 'kaniko', shell: '/busybox/sh') {
                  sh '''#!/busybox/sh
                        /kaniko/executor --log-format text --no-push --context `pwd`/projects/spring-app --destination spring-app:${BRANCH_NAME}-${BUILD_NUMBER}
                  '''
                }
            }
        }
*/
        stage("Collect result") {
            steps {
                container("gradle") {
                    sh """
                        rm -rf deploy
                        mkdir deploy
                        ls -al projects/spring-app/build/libs/
                        mv projects/spring-app/build/libs/*-SNAPSHOT.jar deploy/
                        mv projects/spring-app-script/* deploy/
                        echo "$JOB_NAME#$BUILD_NUMBER" > deploy/pipeline.properties
                        echo "spring-app:${BRANCH_NAME}-${BUILD_NUMBER}" > deploy/docker-version.properties
                    """
                }
            }
        }


        stage("Archive") {
            when {
                expression { return isArchivingNecessary() }
            }
            steps {
                script {
                    if (isArchivingNecessary()) {
                        archiveArtifacts artifacts: "deploy/*"
                    }
                }
            }
        }


        stage("Deploy") {
            when {
                expression {
                    return params.DEPLOY_ENABLED == true
                }
            }
            steps {
                script {
                    def targetServer = resolveTargetServer()
                    echo "deploy to $targetServer"

                    withEnv(["TARGET_SERVER=$targetServer"]) {
                        withCredentials([sshUserPrivateKey(credentialsId: 'ec2-user-ssh', keyFileVariable: 'IDENTITY', passphraseVariable: '', usernameVariable: 'userName')]) {
                            // 파일 카피
                            sh '''
                                scp -o StrictHostKeychecking=no -i $IDENTITY \
                                       deploy/* \
                                       ec2-user@$TARGET_SERVER:~
                                '''
                            echo "copied"
                            // 재시작 스크립트 구동
                            sh '''
                                ssh -o StrictHostKeychecking=no -tt -i $IDENTITY \
                                    ec2-user@$TARGET_SERVER \
                                    "sh -c './deploy.sh --application.branch=$BRANCH_NAME --application.git-commit=$GIT_COMMIT' "
                               '''
                            echo "deployed"
                        }
                        currentBuild.description = "deployed to ${resolveDeployTo()}"
                    }
                }
            }
        }
    }


    post {
        always {
            scanForIssues tool: ktLint(pattern: '**/ktlint/**/*.xml')
            junit '**/test-results/**/*.xml'
            jacoco sourcePattern: '**/src/main/kotlin'
            script {
                if (isNotificationNecessary()) {
                    /*
                    mineRepository()
                    emailext attachLog: true, body: email_content(), subject: email_subject(), to: 'junoyoon@gmail.com'
                    slackSend(channel: "#jenkins", message: "${custom_msg(currentBuild.currentResult)}")
                    */
                }
            }
        }
    }
}


def resolveTargetServer() {
    switch(resolveDeployTo()) {
        case "dev": return env.TARGET_SERVER_DEV
        case "qa" : return env.TARGET_SERVER_QA
        default: return env.TARGET_SERVER_PR
    }
}

def resolveDeployTo() {
    def deployTo = env.DEPLOY_TO

    if (deployTo == null || deployTo == "default") {
        if (isDevelop())  {
            return "dev"
        } else if (isMain()) {
            return "qa"
        } else  {
            return "pr"
        }
    }
    return deployTo
}


// pipeline 바깥쪽 영역은 groovy 사용 가능
def email_content() {
    return '''이 이메일은 중요한 것이여!!

${DEFAULT_CONTENT}

'''
}

def email_subject() {
    return '빌드통지!! - ${DEFAULT_SUBJECT}'
}

def custom_msg(status) {
    return " $status: Job [${env.JOB_NAME}] Logs path: ${env.BUILD_URL}/consoleText"
}

def isSonarQubeNecessary() {
    return isMainOrDevelop()
}

def isArchivingNecessary() {
    return params.DEPLOY_ENABLED != true || !isPr()
}

def isDeploymentNecessary() {
  return isMainOrDevelop() || (env.GITHUB_COMMENT ?: "").contains("deploy this")
}

def isNotificationNecessary() {
    return !isPr()
}

def isMainOrDevelop() {
    return (isDevelop() || isMain())
}

def isMain() {
    return env.BRANCH_NAME == "main"
}

def isDevelop() {
        return env.BRANCH_NAME == "develop"
}

def isPr() {
    return env.BRANCH_NAME.startsWith("PR-")
}



